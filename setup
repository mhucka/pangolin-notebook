#!/bin/bash
# =============================================================================
# @file    setup.sh
# @brief   Set up a new Pangolin Notebook directory
# @author  Michael Hucka <mhucka@caltech.edu>
# @license Please see the file named LICENSE in the Pangolin Notebook diretory
# @website https://github.com/mhucka/pangolin-notebook
# =============================================================================

program=${0##*/}
cwd=$(/bin/pwd -P)
pangolin_path="$cwd/pangolin-notebook"
ignore_template="$pangolin_path/templates/dot.gitignore"
about_template="$pangolin_path/templates/about-template.md"
front_template="$pangolin_path/templates/front-template.md"
page_template="$pangolin_path/templates/page-template.md"

# Functions.
# .............................................................................

print_usage() {
cat <<EOF >&2
Usage:
    $program [-h] [-p]

This script is used to initialize a Pangolin Notebook user's directory.
It assumes that the current directory is the user's notebook directory,
and that the Pangolin Notebook directory is a subdirectory named
'pangolin-notebook'.  If that is not the case, use the -s option to
indicate the actual path to your copy of Pangolin Notebook.

Options:
    -h, --help          Print this help message and exit
    -p, --pangolin      Path to the Pangolin Notebok directory

EOF
}

parse_args() {
    # Parse comand-line options.

    while (( $# > 0 )); do
        case $1 in
            -p | --pangolin )
                shift
                pangolin_path=$1
                ;;
            -h | --help )
                print_usage
                exit 0
                ;;
            *)
                print_usage
                exit 1
                ;;
        esac
        shift
    done
}

say() {
    # Takes 2 arguments: a severity code, and a text string.
    # Prints a message to the terminal, unless the code is "note"
    # and $chatty is not 1.  Always logs the message.
    # Optional 3rd argument can be "-n" to prevent newline.

    local code=$1
    local msg=$2
    local nonewline=$3

    local RED=$(tput setaf 1)
    local GREEN=$(tput setaf 2)
    local YELLOW=$(tput setaf 3)
    local RESET=$(tput sgr0)

    if [[ -z "$nonewline" ]]; then
        newline="\\n"
    else
        newline=
    fi

    case $code in
        info)
            printf "${GREEN}%s${RESET}${newline}" "$msg"
            ;;
        warning)
            printf "${YELLOW}%s${RESET}${newline}" "$msg"
            ;;
        error)
            printf "${RED}%s${RESET}${newline}" "$msg"
            ;;
    esac
}

check_dirs() {
    if [[ -e Makefile-main.mk && -e styles && -e templates ]]; then
        say error "Very sorry for the trouble, but this script should NOT be"
        say error "executed from within the Pangolin Notebook source directory"
        say error "itself. Please run this script from your actual notebook"
        say error "directory instead."
        exit 1
    fi
}

check_existing() {
    for file in Makefile pangolin.yml; do
        if [[ -e $file ]]; then
            say error "Found an existing copy of file '$file'. Quitting now"
            say error "to avoid overwriting an existing installation. Please move"
            say error "the file out of the way and run 'setup' again."
            exit 1
        fi
    done
}

copy_files() {
    say info "Copying template Makefile."
    cp -i "$pangolin_path/Makefile" "$cwd"
    say info "Copying template Pangolin configuration file."
    cp -i "$pangolin_path/pangolin.yml" "$cwd"
    if [[ -e .gitignore ]]; then
        say info "Appending to .gitignore file."
        grep -v '^## ' "$ignore_template" >> .gitignore
    else
        say info "Creating .gitignore file."
        cp -i "$ignore_template" .gitignore
    fi
}

create_dirs() {
    say info "Creating contents directory."
    mkdir -p contents
    say info "Creating template front page and about page."
    cp -i "$about_template" contents/about.md
    cp -i "$front_template" contents/front-page.md
    cp -i "$page_template" contents/page-1.md
    cp -i "$page_template" contents/page-2.md
}

check_dependencies() {
    problem=false
    if ! [ -x "$(command -v pandoc)" ]; then
        say error "Cannot find pandoc -- please check Pandoc is installed."
        problem=true
    fi
    if ! [ -x "$(command -v envsubst)" ]; then
        say error "Cannot find envsubst -- please check that GNU gettext is installed."
        problem=true
    fi
    if ! [ -x "$(command -v make)" ]; then
        say error "Cannot find make -- please check GNU Make is installed."
        problem=true
    fi
    mversion=$(make --version | grep GNU)
    if [ -z "$mversion" ]; then
        say error "The copy of 'make' found does not appear to be GNU Make."
        say error "Please check GNU Make is installed and runnable as 'make'."
        problem=true
    fi
    if $problem; then
        say warning "Pangolin Notebook may not function or work as expected."
        say warning "Please refer to the instructions in the README.md file"
        say warning "or visit https://github.com/mhucka/pangolin-notebook"
    fi
    if ! [ -x "$(command -v fswatch)" ]; then
        say warning "Cannot find fswatch. This is not fatal, but it will"
        say warning "prevent 'make autorefresh' from working until fswatch"
        say warning "is installed."
    fi
    unset problem
}

inform_user() {
    say info "Done with setup."
    say info "---------------------------------------------------------------"
    say info "Now edit 'pangolin.yml' to configure your notebook"
    say info "---------------------------------------------------------------"
}


# Sanity checks.
# .............................................................................

# Main entry point.

parse_args "$@"
check_dirs
check_existing
copy_files
create_dirs
check_dependencies
inform_user

exit 0
